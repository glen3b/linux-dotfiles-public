#!/bin/bash
# Based on https://github.com/k00mi/mpdmenu

MPD_PORT="6600"
DMENU_EXECUTABLE="dmenu"

[ -t 0 ]
IS_INTERACTIVE_TERMINAL=$?

# intelligent default for GUI vs TUI: when using TTY, use bemenu (which gets defaulted to `curses` backend later)
if (( IS_INTERACTIVE_TERMINAL == 0 ))
then
    DMENU_EXECUTABLE="bemenu"
fi

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -d|--dmenu)
    DMENU_EXECUTABLE="$2"
    shift # past argument
    shift # past value
    ;;
    -p|--port)
    MPD_PORT="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

MPC="mpc --quiet -p $MPD_PORT"

if [ -z "$BEMENU_BACKEND" -a "$DMENU_EXECUTABLE" == "bemenu" ]
then
    export BEMENU_BACKEND=curses
fi

# a disambiguation template
# mpc -f '[[%albumartist%]|[%artist%]] - %album% (%date%) @ %file%' find title 'Somebody To Love' | sed -E 's#(.*)\) @ (.*/)?(.*)#\1) @ \3 @ \2\3#' | awk -F ' @ ' '{printf "%s @ %s @ ",$1,$2; system("sha256sum <<< '"'"'" $3 "'"'"' | head -c 8"); print "";}'

# max height for vertical menu
height=12
default_dedup_displaypattern='[[%albumartist%]|[%artist%]] - %album% (%date%) @ %file%'
default_prettyselect_displaypattern='[[[[%disc%:]%track% ]%title%]|[%file%]]@@#%@@%file%'

DMENU() {
    # Vertical menu if $3 is given
    # https://stackoverflow.com/questions/3130375/bash-script-store-stderr-in-a-variable
    { error=$(echo -e "$1" | $DMENU_EXECUTABLE -i -p "$2" ${3:+"-l" "$3"} 2>&1 1>&$out); } {out}>&1 
    grep -q 'cannot grab keyboard' <<< "$error" && exit 1
    exec {out}>&-
}

get_playlist() {
    $MPC -f "%position% - %artist% - %album% - %title% - ID %id%" playlist
}

select_from() {
    DMENU "$1" "Select $2" $height
}

# deduplicates a list of candidate songs
# formatflag must cause to be rendered whatever human readable description is desired,
#   followed by ' @ ' then the filename
#   example: '[[%albumartist%]|[%artist%]] - %album% (%date%) @ %file%'
# <formatflag> <mpcFilterArgs>
deduplicate() {
    local displayflag="$1"
    shift
    local songlist_verbose=$($MPC -f "$displayflag" find "$@" | sed -E 's#(.*)\) @ (.*/)?(.*)#\1) @ \3 @ \2\3#' | awk -F ' @ ' '{printf "%s @ %s @ ",$1,$2; title_quotesub=$3; gsub(/'"'"'/, "'"'"'\"'"'"'\"'"'"'", title_quotesub); system("sha256sum <<< '"'"'" title_quotesub "'"'"' | head -c 8"); printf " @ %s\n",$3;}')
    if [[ "$(wc -l <<< "$songlist_verbose")" -gt 1 ]]
    then
        # lots of songs, we need to disambiguate
        local songlist="$(awk -F ' @ ' 'BEGIN{OFS=" @ ";} {print $1,$2,$3}' <<< $songlist_verbose)"
        local chosen_song_entry="$(select_from "$songlist" "song (disambiguation)")"
        # if song empty (e.g. cancelled selection), break out of function
        [[ -z "$chosen_song_entry" ]] && return 1
        # not perfect: doesn't technically only match beginning of line
        grep -F "$chosen_song_entry" <<< "$songlist_verbose" | awk -F ' @ ' '{print $4}'
    else
        # 0 or 1, so just return the output
        awk -F ' @ ' '{print $4}' <<< "$songlist_verbose"
    fi
}

# selects from a list of candidate songs unambiguously, showing details as wanted
# formatflag must cause to be rendered whatever human readable description is desired,
#   followed by '@@#%@@' (escapes to @@%@@) then the filename
#   example: '[[[[%disc%:]%track% ]%title%]|[%file%]]@@#%@@%file%'
# <formatflag> <allStr> <mpcFilterArgs>
# arguments are mpc filter params
# differs from deduplicate in that it does not attempt to display file data
# stdout will be a file list to pipe to MPC ADD
prettyselect_song() {
    local formatstr="$1"
    local allstr="$2"
    shift
    shift
    # maps desc,file -> desc,file,sha256
    local songlist_verbose="$($MPC -f "$formatstr" find "$@" | perl -MDigest::SHA -ne 'print $1."@@%@@".$2."@@%@@".substr(Digest::SHA::sha256_hex($2), 0, 10)."\n" if /^(.+)@@%@@(.+)$/')"
    # maps songlist_verbose -> desc,sha256 (for readability in face of long filenames)
    local songlist="$(awk -F '@@%@@' 'BEGIN{OFS=" @ "} {print $1,$3}' <<< $songlist_verbose)"
    local chosen_song_entry="$(select_from "${songlist}\n$allstr" "song")"
    if [[ "$chosen_song_entry" == "$allstr" ]]
    then
        $MPC -f "%file%" find "$@"
        return 0
    fi
    # if song empty (e.g. cancelled selection), break out of function
    [[ -z "$chosen_song_entry" ]] && return 1
    awk -F ' @ ' -v chosen_desc="${chosen_song_entry%% @ *}" -v chosen_sha="${chosen_song_entry##* @ }" '$1 == chosen_desc && $3 == chosen_sha {print $2}' <<< "$songlist_verbose"
}

verify_playing() {
    mpc status | grep -q '\[playing\]'
}

# add titles directly
add_direct() {
    local songs=$($MPC list Title)
    local song=$(select_from "$songs" "song")

    if [ -n "$song" ]; then
        deduplicate "$default_dedup_displaypattern" Title "$song" | $MPC add
    else
        return 1
    fi

    return 1
}

# adds without drilling through artist
add_from_album() {
    all="[ALL]"

    local album=$(select_from "$($MPC list Album)\n$all" "album")

    if [ "$album" = "$all" ]; then
        $MPC listall | $MPC add;
    elif [ -n "$album" ]; then
        local songs=$($MPC find -f '%title%' album "$album")
        local song=$(select_from "$songs\n$all" "song")

        if [ "$song" = "$all" ]; then
            $MPC findadd Album "$album"
        elif [ -n "$song" ]; then
            deduplicate 'By: [[%albumartist%]|[%artist%]] (%date%) @ %file%' Album "$album" Title "$song" | $MPC add
        else
            return 1
        fi
    else
        return 1
    fi

    return 1
}

# adds without drilling through the album
add_from_artist() {
    all="[ALL]"

    local artist=$(select_from "$($MPC list Artist)\n$all" "artist")

    if [ "$artist" = "$all" ]; then
        $MPC listall | $MPC add;
    elif [ -n "$artist" ]; then
        local songs=$($MPC list Title Artist "$artist")
        local song=$(select_from "$songs\n$all" "song")

        if [ "$song" = "$all" ]; then
            $MPC findadd Artist "$artist"
        elif [ -n "$song" ]; then
            deduplicate '[In: %album%|%title% (Unknown Album)] (%date%) @ %file%' Artist "$artist" Title "$song" | $MPC add
        else
            return 1
        fi
    else
        return 1
    fi

    return 1
}

# adds via full drilldown
add_drilldown() {
    all="[ALL]"

    local artist=$(select_from "$($MPC list albumartist)\n$all" "album artist")

    if [ "$artist" = "$all" ]; then
        $MPC listall | $MPC add;
    elif [ -n "$artist" ]; then
        local albums=$($MPC list Album AlbumArtist "$artist")
        local album=$(select_from "$albums\n$all" "album")

        if [ "$album" = "$all" ]; then
            $MPC findadd AlbumArtist "$artist"
        elif [ -n "$album" ]; then
            prettyselect_song "$default_prettyselect_displaypattern" "$all" Album "$album" AlbumArtist "$artist" | $MPC add
        fi
    fi
}

remove() {
    local playlist=$(get_playlist)
    local song=$(select_from "$playlist" "song")

    [ -n "$song" ] && $MPC del "${song%%\ *}" && return 0
    return 1
}

switch_output() {
    local outputs=$($MPC outputs | sed -r 's/^\s*Output\s+[0-9]+\s*\((.*)\)\s*is.**$/\1/g')
    local output=$(select_from "$outputs" "output")

    [ -n "$output" ] && $MPC enable only "$output"
    return 1
}

show_dialog() {
    if (( IS_INTERACTIVE_TERMINAL == 0 ))
    then
        less
    else
        yad --text-info --no-buttons --title "MPD Song Info"
    fi
}

song_info_dialog() {
    ~/bin/mpc-song-info | show_dialog
    return 0
}

jump() {
    local playlist=$(get_playlist)
    local song=$(select_from "$playlist" "song")

    [ -n "$song" ] && $MPC play "${song%%\ *}" && return 0
    return 1
}

load_playlist() {
    local playlistnames="$($MPC lsplaylists)"
    local playlist="$(select_from "$playlistnames" "playlist")"

    [ -n "$playlist" ] && $MPC load "$playlist" && return 0
    return 1
}

toggle(){
    $MPC toggle
    return 0
}

play(){
    $MPC play
    return 0
}

pause(){
    $MPC pause
    return 1
}

stop(){
    $MPC stop
    return 0
}

next(){
    $MPC next
    return 1
}

prev(){
    $MPC prev
    return 1
}

shuffle(){
    $MPC shuffle
    return 1
}

clear(){
    $MPC clear
    return 1
}

crop() {
    $MPC crop
    return 1
}

hoist() {
    local playlist="$(get_playlist)"
    local song=$(select_from "$playlist" "song")

    [ -n "$song" ] || return 1

    /home/glen/bin/mpc-byid asnext "${song##*\ }"

    return 0
}

single_toggle() {
    $MPC single
    return 0
}

single_oneshot_toggle() {
    /home/glen/bin/mpc-single-oneshot --toggle
    return 0
}

random_toggle() {
    $MPC random
    return 1
}

while true; do
    action=$(DMENU "Add (Full)\nAdd Artist\nAdd Album\nAdd Song\nClear\nCrop\nInfo\nRemove\nShuffle\nRandom\nJump\nHoist\nToggle\nPlay\nPause\nSingle Oneshot\nSingle\nSwitch Output\nLoad Playlist\nStop\nNext\nPrev" "What to do?")
    case $action in
        "Add (Full)") add_drilldown;;
        "Add Artist") add_from_artist;;
        "Add Album") add_from_album;;
        "Add Song") add_direct;;
        Clear) clear;;
        Crop) crop;;
        Info) song_info_dialog;;
        Remove) remove;;
        Shuffle) shuffle;;
        Jump) jump;;
        Hoist) hoist;;
        Pause) pause;;
        Toggle) toggle;;
        Play) play;;
        "Load Playlist") load_playlist;;
        Stop) stop;;
        Next) next;;
        Prev) prev;;
        "Single Oneshot") single_oneshot_toggle;;
        Single) single_toggle;;
        "Switch Output") switch_output;;
        "Random") random_toggle;;
        "") exit 0;;
        *) false;;
    esac
    action_status=$?
    pkill -SIGRTMIN+3 i3blocks
    [ $action_status -eq 0 ] && exit 0
done
